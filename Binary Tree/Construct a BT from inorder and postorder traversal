Given two integer arrays inorder and postorder where inorder is the 
inorder traversal of a binary tree and postorder is the postorder 
traversal of the same tree, construct and return the binary tree.

 

Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]

class Solution {
public:
    int findPos(vector<int>& inorder, int element, int n){
        
        for(int i = 0 ; i < n ; i++){
            
            if(inorder[i] == element) return i;
            
        }
        
        return -1;
        
    }
    
    TreeNode* solve(vector<int>& inorder, vector<int>& postorder, int inorderStart, int inorderEnd, int& index, int n){
        
        if(inorderStart > inorderEnd || index < 0) return NULL;
        
        int element = postorder[index--];
        TreeNode* root = new TreeNode(element);
        int pos = findPos(inorder, element, n);
        
        root -> right = solve(inorder, postorder,pos + 1, inorderEnd, index, n);
        root -> left = solve(inorder, postorder, inorderStart, pos - 1, index, n);
            
        return root;
        
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        
        int n = inorder.size();
        int inorderStart = 0, inorderEnd = n - 1;
        int index = n - 1;
        
        return solve(inorder, postorder, inorderStart, inorderEnd, index, n);
        
    }
};
