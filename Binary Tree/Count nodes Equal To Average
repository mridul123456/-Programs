Given the root of a binary tree, return the number of nodes where the value of 
the node is equal to the average of the values in its subtree.
Note:The average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.
A subtree of root is a tree consisting of root and all of its descendants.

Input: root = [4,8,5,0,1,null,6]
Output: 5
Explanation: 
For the node with value 4: The average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4.
For the node with value 5: The average of its subtree is (5 + 6) / 2 = 11 / 2 = 5.
For the node with value 0: The average of its subtree is 0 / 1 = 0.
For the node with value 1: The average of its subtree is 1 / 1 = 1.
For the node with value 6: The average of its subtree is 6 / 1 = 6.


class Solution {
public:
    // pair.first stores the sum
    // pair.second stores the count of no of nodes till now
    pair<int, int> solve(TreeNode* root, int& cnt){
        
        if(root == NULL){
            return {0, 0};
        }
        
        if(root -> left == NULL && root -> right == NULL){ cnt++; return {root -> val, 1};}
        
        auto left = solve(root -> left, cnt);
        auto right = solve(root -> right, cnt);
        
        pair<int, int> ans;
        
        //Storing current node sum
        ans.first = root -> val + left.first + right.first;
        
        //Adding count by 1 because of current node;
        ans.second = 1+left.second+right.second;
        
        if((ans.first/ans.second) == root -> val) cnt++;
        
        return ans;
        
    }
    
    int averageOfSubtree(TreeNode* root) {
        
        int cnt = 0;
        auto temp = solve(root, cnt);
        
        return cnt;
    }
};
