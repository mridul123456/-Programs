Given the root of a binary tree and an integer targetSum, return all root-to-leaf 
paths where the sum of the node values in the path equals targetSum. Each path should 
be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. 
A leaf is a node with no children.

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22

class Solution {
public:
    void solve(TreeNode* root, vector<vector<int>>& ans, vector<int> ds, int sum, int targetSum){
        
        if(root == NULL) return;
        
        if(root -> left == NULL && root -> right == NULL){
            if(targetSum == sum + root -> val){
              ds.push_back(root -> val);
              ans.push_back(ds);
              ds.pop_back();
            }
            return;
        }
        
        ds.push_back(root -> val);
        solve(root -> left, ans, ds, sum + root -> val, targetSum);
        solve(root -> right, ans, ds, sum + root -> val, targetSum);
        ds.pop_back();
        
    }
    
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        
        vector<vector<int>> ans;
        vector<int> ds;
        int sum = 0;
        
        solve(root, ans, ds, sum, targetSum);
        
        return ans;
    }
};
