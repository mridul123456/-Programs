Given the root of a binary tree and an integer targetSum, return the 
number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it 
must go downwards (i.e., traveling only from parent nodes to child nodes).

Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3

void solve(TreeNode* root, int targetSum, vector<int> arr, int& cnt){
        
        if(root == NULL) return;
        
        arr.push_back(root -> val);
        
        solve(root -> left, targetSum, arr, cnt);
        solve(root -> right, targetSum, arr, cnt);
        
        long long int sum = 0;
        
        for(int i = arr.size() - 1 ; i >= 0 ; i--){
            sum += arr[i];
            
            if(sum == targetSum) cnt++;
        }
        
    }
    
    int pathSum(TreeNode* root, int targetSum) {
        int cnt = 0;
        solve(root, targetSum, {}, cnt);
        
        return cnt;
    }
};
