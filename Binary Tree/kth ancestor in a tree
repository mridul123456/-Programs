Given a binary tree of size  N, a node, and a positive integer k., 
Your task is to complete the function kthAncestor(), the function 
should return the kth ancestor of the given node in the binary tree. 
If there does not exist any such ancestor then return -1.
Note: It is guaranteed that the node exists in the tree.



Input:
K = 2
Node = 4
Output: 1
Explanation:
Since, K is 2 and node is 4, so we
first need to locate the node and
look k times its ancestors.
Here in this Case node 4 has 1 as his
2nd Ancestor aka the Root of the tree.


BRUTE FORCE: Finding the path from root to the node and then 
storing the path in a vector and then finding the kth ancestor


void solve(Node* root, int node, vector<int>& path, vector<int>& ans){
    
    if(root == NULL) return;
    
    if(root -> data == node) {
        ans = path;
        return;
    }
    
    path.push_back(root -> data);
    solve(root -> left, node, path, ans);
    solve(root -> right, node, path, ans);
    path.pop_back();
}

int kthAncestor(Node *root, int k, int node)
{
      vector<int> path;
      vector<int> ans;
      solve(root, node, path, ans);
      
      path = ans;
      
      if(path.size() < k) return -1;
      
      int a;
      for(int i = path.size() - 1 ; i >= 0 ; i--){
          
          k--;
          if(k == 0){
              a = path[i];
              break;
          }
          
      }
      return a;
}


//Optimised Approach : 

Node* solve(Node* root, int& k, int node){
    
    if(root == NULL) return NULL;
    if(root -> data == node) return root;
    
    Node* left = solve(root -> left, k, node);
    Node* right = solve(root -> right, k, node);
    
    if(left != NULL && right == NULL){
        k--;
        if(k <= 0){
          //Here we are storing INT_MAX into k, so that once we get kth node, after that
          //there are chances that it may be overwritten 
          //So, to overcome this we set the value of k to INT_MAX
            k = INT_MAX;
            return root;
        }
        return left;
    }
    
    if(left == NULL && right != NULL){
        k--;
        if(k <= 0){
          //Here we are storing INT_MAX into k, so that once we get kth node, after that
          //there are chances that it may be overwritten 
          //So, to overcome this we set the value of k to INT_MAX
            k = INT_MAX;
            return root;
        }
        return right;
    }
    
    return NULL;
}

// your task is to complete this function
int kthAncestor(Node *root, int k, int node)
{
    Node* ans = solve(root, k, node);
    
    if(ans == NULL || ans -> data == node) return -1;
    
    return ans -> data;
}

