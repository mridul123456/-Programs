class Solution {
    
    void dfs(int node, int parent, int& timer, vector<int>& ap, vector<int>& disc, vector<int>& low, 
             vector<int> adj[], map<int, bool>& visited){
    
        visited[node] = true; 
        disc[node] = low[node] = timer++;
        int child = 0;
        
        for(auto i : adj[node]){
            if(visited[i] && i == parent) continue;
            else if(!visited[i]){
                dfs(i, node, timer, ap, disc, low, adj, visited);
                
                low[node] = min(low[node], low[i]);
                
                if(low[i] >= disc[node] && parent != -1){
                    ap[node] = 1;
                }child++;
            }
            else{
                low[node] = min(low[node], disc[i]);
            }
        }
         
         if(parent == -1 && child > 1){
             ap[node] = 1;
         }        
    }
  
  public:
    vector<int> articulationPoints(int V, vector<int>adj[]) {
       vector<int> ap(V, 0);
       vector<int> disc(V, -1);
       vector<int> low(V, -1);
       int timer = 0;
       int parent = -1;
       
       map<int, bool> visited;
       
       for(int i = 0 ; i < V ; i++){
           if(!visited[i]){
               dfs(i, parent, timer, ap, disc, low, adj, visited);
           }
       }
       
       vector<int> ans;
       int flag = 0;
       
       for(int i = 0 ; i < V ; i++){
           if(ap[i] == 1){
               flag = 1;
               ans.push_back(i);
           }
       }
       
       if(flag == 0) return {-1};
       return ans;
    }
};
