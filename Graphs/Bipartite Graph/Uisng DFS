class Solution {
public:
    void createGraph(map<int, list<int>>& adj, vector<vector<int>>& graph, int n){
        
        for(auto i = 0 ; i < n ; i++){
            for(int j = 0 ; j < graph[i].size() ; j++){
                adj[i].push_back(graph[i][j]);
                adj[graph[i][j]].push_back(i);
            }
        }
        
    }
    
    bool bipartite(int node, int parent, map<int, list<int>>& adj, vector<int>& color){
        
       if(parent == -1) color[node] = 1;
       else if(parent != -1) if(color[node] == -1) color[node] = 1 - color[parent];
        
        
        for(auto i : adj[node]){
            if(color[i] == -1){
                bool ans = bipartite(i, node, adj, color);
                if(!ans) return false;
            }
            else if(color[i] == color[node]) return false;
        }
        
        return true;
        
    }
    
    bool isBipartite(vector<vector<int>>& graph) {
        
        int n = graph.size();
        
        map<int, list<int>> adj;
        createGraph(adj, graph, n);
        
        vector<int> color(n, -1);
        
        for(int i = 0 ; i < n ; i++){
            if(color[i] == -1){
                if(!bipartite(i, -1, adj, color))
                    return false;
            }
        }
        
        return true;
        
    }
};
