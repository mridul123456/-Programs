#include<bits/stdc++.h>
using namespace std;

class Graph{
  
  public:
    
    map<int, list<int>> adj;
    
    void addEdge(int u, int v){
        
        adj[u].push_back(v);
        adj[v].push_back(u);
        
    }
    
    void print(){
        
        for(auto i : adj){
            cout<<i.first<<" -> ";
            for(auto j : i.second){
                cout<<j<<", ";
            }cout<<endl;
        }
    }
    
};

int main(){
    
    Graph g;
    
    int n;
    cout<<"Enter the number of vertices/nodes : ";
    cin>>n;
    cout<<endl;
    
    int edges;
    cout<<"Enter the number of edges : ";
    cin>> edges;
    cout<<endl;
    
    cout<<"Enter edges : \n";
    for(int i = 0 ; i < edges ; i++){
        int u, v;
        cin>>u>>v;
        g.addEdge(u, v);
    }
    
    g.print();
    
    return 0;
}



Enter the number of vertices/nodes : 3
Enter the number of edges : 3
Enter edges : 
1 2 
2 3
3 1
1 -> 2, 3, 
2 -> 1, 3, 
3 -> 2, 1, 





#include<bits/stdc++.h>
using namespace std;

class Graph{
  
  public:
    
    map<int, list<int>> adj;
    
    void addEdge(int u, int v){
        
        adj[u].push_back(v);
        // adj[v].push_back(u);
        
    }
    
    void print(){
        
        for(auto i : adj){
            cout<<i.first<<" -> ";
            for(auto j : i.second){
                cout<<j<<", ";
            }cout<<endl;
        }
    }
    
};

void bfs(int source, map<int, list<int>>& adj){
    
    map<int, bool> visited;
    queue<int> q;
    
    q.push(source);
    visited[source] = true;
    
    while(!q.empty()){
        
        int front = q.front();
        q.pop();
        
        cout<<front<<" ";
        
        for(auto i : adj[front]){
              while(!visited[i]){
                  q.push(i);
                  visited[i] = true;
              }
        }
        
    }
    
}

void dfs(int node, map<int, list<int>>& adj, map<int, bool>& visited){
    
    cout<<node<<" ";
    visited[node] = true;
    
    for(auto i : adj[node]){
        if(!visited[i]){
            dfs(i, adj, visited);
        }
    }
    
}

bool detectCycleBFS(int source, map<int, list<int>>& adj){
    
    map<int, bool> visited;
    map<int, int> parent;
    
    queue<int> q;
    
    q.push(source);
    visited[source] = true;
    
    while(!q.empty()){
        
        int front = q.front();
        q.pop();
        
        for(auto i : adj[front]){
            if(visited[i] && parent[i] != front) return true;
            if(!visited[i]){
                q.push(i);
                visited[i] = true;
                parent[i] = front;
            }
        }
    }
    
    return false;
    
}

int main(){
    
    Graph g;
    
    int n;
    cout<<"Enter the number of vertices/nodes : ";
    cin>>n;
    cout<<endl;
    
    int edges;
    cout<<"Enter the number of edges : ";
    cin>> edges;
    cout<<endl;
    
    cout<<"Enter edges : \n";
    for(int i = 0 ; i < edges ; i++){
        int u, v;
        cin>>u>>v;
        g.addEdge(u, v);
    }
    
    g.print();
    
    cout<<endl;
    cout<<"BFS : ";
    bfs(1, g.adj);
    
    map<int, bool> visited;
    cout<<endl;
    cout<<"DFS : ";
    dfs(1, g.adj, visited);
     
    bool ans = detectCycleBFS(1, g.adj);
    
    if(ans) cout<<"\nCycle exisits .\n";
    else cout<<"\nCycle doesn't exisits .\n";
    
    
    return 0;
}
