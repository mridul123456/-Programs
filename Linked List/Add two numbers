#include <bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node* next;
    
    node(int data){
        this->data = data;
        next = NULL;
    }
};

void insertAtHead(node* &head, int data){
    
    node* new_node = new node(data);
    
    if(head == NULL){
        head = new_node;
    }
    else{
        new_node -> next = head;
        head = new_node;
    }
}

void display(node* head){
    
    if( head == NULL){
        cout<<"List is empty"<<endl;
        return;
    }
    
    node* temp = head;
    
    cout<<"Linked List is as folow : "<<endl;
    
    while(temp != NULL){
        cout<<temp -> data<<" ";
        temp = temp -> next;
    }cout<<endl;
    
}

node* insertAtTail(node* & tail, node* & head, int val){
    node* newNode = new node(val);
    
    if(head == NULL){
        head = newNode;
        tail = newNode;
    }else{
        tail -> next = newNode;
        tail = newNode;
    }
}

node* add(node* first, node* second){
    
    node* ansHead = NULL;
    node* ansTail = NULL;
    int carry = 0;
    
    while( carry != 0 || first != 0 || second != 0){
        
        int val1 = 0;
        if(first != NULL){
            val1 = first -> data;
        }
        
        int val2 = 0;
        if(second != NULL){
            val2 = second -> data;
        }
        
        int sum = carry + val1 + val2;
        
        int digit = sum % 10;
        
        insertAtTail(ansTail, ansHead, digit);
        
        carry = sum / 10;
        
        if(first != NULL) first = first -> next;
        if(second != NULL) second = second -> next;
        
    }
    
    return ansHead;
}


int main() {
   
   node *head = NULL;
   
   insertAtHead(head, 3);
   insertAtHead(head, 4);
   insertAtHead(head, 9);
   
   node* head1 = NULL;
   
   insertAtHead(head1, 9);
   insertAtHead(head1, 6);
   insertAtHead(head1, 5);
   
   display(head);
   display(head1);
   
  node* newHead = add(head, head1);
   
  cout<<"Number after adding two lists are : "<<endl;
  display(newHead);
   

   return 0;
   
}
