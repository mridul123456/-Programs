
#include <bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node* next;
    
    node(int data){
        this->data = data;
        next = NULL;
    }
};

void insertAtHead(node* &head, int data){
    
    node* new_node = new node(data);
    
    if(head == NULL){
        head = new_node;
    }
    else{
        new_node -> next = head;
        head = new_node;
    }
}

void display(node* head){
    
    if( head == NULL){
        cout<<"List is empty"<<endl;
        return;
    }
    
    node* temp = head;
    
    cout<<"Linked List is as folow : "<<endl;
    
    while(temp != NULL){
        cout<<temp -> data<<" ";
        temp = temp -> next;
    }cout<<endl;
    
}

node* getMidNode(node* head){
    
    node* slow = head, *fast = head -> next;
    
    while( fast && fast -> next){
        slow = slow -> next;
        fast = fast -> next -> next;
    }
    
    return slow;
    
}

node* merge(node* left, node* right){
    
    if(left == NULL) return right;
    if(right == NULL) return left;
    
    node* ans = new node(-1);
    node* temp = ans;
    
    while(left != NULL && right != NULL){
        
        if(left -> data <= right -> data){
            temp -> next = left;
            temp = left;
            left = left -> next;
        }
        else {
            temp -> next = right;
            temp = right;
            right = right -> next; 
        }
    }
    
    while(left != NULL){
         temp -> next = left;
         temp = left;
         left = left -> next;
    }
    
    while(right != NULL){
        temp -> next = right;
        temp = right;
        right = right -> next;
    }
    
    return ans->next;
}

node* mergeSort(node* head){
    
    if(head == NULL || head -> next == NULL) return head;
    
    node* mid = getMidNode(head);
    
    node* left = head;
    node* right = mid -> next;
    mid->next = NULL;
    
    
    left = mergeSort(left);
    right = mergeSort(right);
    
    return merge(left, right);
}


int main() {
   
   node *head = NULL;
   
   insertAtHead(head, -2);
   insertAtHead(head, 1);
   insertAtHead(head, 0);
   insertAtHead(head, 50);
   insertAtHead(head, 1);
   insertAtHead(head, 100);
   
   display(head);
   
   head = mergeSort(head);
   
  cout<<"Sorted List is : "<<endl;
  display(head);
   

   return 0;
   
}
