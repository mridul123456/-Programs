
#include <bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node* next;
    
    node(int data){
        this->data = data;
        next = NULL;
    }
};

void insertAtHead(node* &head, int data){
    
    node* new_node = new node(data);
    
    if(head == NULL){
        head = new_node;
    }
    else{
        new_node -> next = head;
        head = new_node;
    }
}

void display(node* head){
    
    if( head == NULL){
        cout<<"List is empty"<<endl;
        return;
    }
    
    node* temp = head;
    
    cout<<"Linked List is as folow : "<<endl;
    
    while(temp != NULL){
        cout<<temp -> data<<" ";
        temp = temp -> next;
    }cout<<endl;
    
}

node* getMidNode(node* head){
    
    node* slow = head;
    node* fast = head -> next;
    
    while( fast && fast -> next){
        slow = slow -> next;
        fast = fast -> next -> next;
    }
    
    return slow;
}

node* reverse(node* head){
    
    node* prev = NULL, *curr = head, *next = NULL;
    
    while( curr != NULL){
        next = curr -> next;
        curr -> next = prev;
        prev = curr;
        curr = next;
    }
    
    return prev;
}


int main() {
   
   node *head = NULL;
   
   insertAtHead(head, 4);
   insertAtHead(head, 2);
   insertAtHead(head, 9);
//   insertAtHead(head, 1);
   insertAtHead(head, 2);
   insertAtHead(head, 4);
   
   display(head);
   
   node* mid = getMidNode(head);
   
   node* temp = mid -> next;
   mid -> next = reverse(temp);
   
   temp = head;
   node* temp1 = mid -> next;
   int flag = 0;
   
   while(temp != NULL && temp1 != NULL){
       
       if(temp -> data != temp1 -> data){
           flag = 1;
           break;
       }
       
       temp = temp -> next;
       temp1 = temp1 -> next;
       
   }
   
   temp = reverse(mid -> next);
   mid -> next = temp;
   
//   cout<<endl;
//   display(head);
//   cout<<endl;
 
   if( flag == 1) cout << "List is not palindromic";
   else cout<<"Given List is a palindromic String";
   
   return 0;
   
}
