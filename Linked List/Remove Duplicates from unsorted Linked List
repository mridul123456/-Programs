#include <bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node* next;
    
    node(int data){
        this->data = data;
        next = NULL;
    }
};

void insertAtHead(node* &head, int data){
    
    node* new_node = new node(data);
    
    if(head == NULL){
        head = new_node;
    }
    else{
        new_node -> next = head;
        head = new_node;
    }
}

void display(node* head){
    
    if( head == NULL){
        cout<<"List is empty"<<endl;
        return;
    }
    
    node* temp = head;
    
    cout<<"Linked List is as folow : "<<endl;
    
    while(temp != NULL){
        cout<<temp -> data<<" ";
        temp = temp -> next;
    }cout<<endl;
    
}

void removeDuplicates(node* & head){
    
    if(head == NULL || head -> next == NULL) return;
    
    map<int, bool> visited;
    node* prev = head, *curr = head;
    
    while(curr != NULL){
    //When duplicate is found
    if(visited[curr -> data] == true){
        //Breaking the link of duplicate node
        prev -> next = curr -> next;
        curr = curr -> next;
    }
    else{
        //making current node as visited
        visited[curr -> data] = true;
        prev = curr;
        curr = curr -> next;
    }
  }
}

int main() {
   
   node *head = NULL;
   
   insertAtHead(head, 0);
   insertAtHead(head, 2);
   insertAtHead(head, 1);
   insertAtHead(head, 0);
   insertAtHead(head, 1);
   insertAtHead(head, 2);
   
   display(head);
   
   removeDuplicates(head);
   
   cout<<endl<<"After deleting duplicates : "<<endl;
   display(head);
   
   return 0;
   
}

//TC = O(N)
//SC = O(N)
