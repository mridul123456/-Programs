class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        
        sort(nums.begin(), nums.end());
        
        vector<int> arr;
        
        int n = nums.size();
       for(int i = 0 ; i <= n - 3 ; i++){
           
           int s = i + 1, e = n - 1;
           int temp;
           
           while(s < e){
               int sum = nums[i] + nums[s] + nums[e];
               
               if(sum > target){
                   e--;
               }else if(sum < target){
                   s++;
               }else{
                    return sum;
               }
               temp = sum;
               
           }
           
           arr.push_back(temp);
       } 
        
        int diff = INT_MAX;
        int ans;
        n = arr.size();
        
        
        for(int i = 0 ; i < n ; i++){
            if(abs(arr[i] - target) < diff){
                diff = abs(arr[i] - target);
                ans = arr[i];
            }
        }
        
        return ans;
        
    }
};




//Optimised approach space wise

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());//I am going to use Two pointer for that i'm sorting it if you want to use some other approch feel free to do that;
        int n=nums.size();

        int sum=nums[0]+nums[1]+nums[2];//Our Intial sum or assuption that intial three values are the closet sum
        for(int i=0;i<n-2;i++){ //n-2 Since we have taken n-1 in our point so no need to go beyond that
            //Implementing Two pointer technique
            int j=i+1;
            int k=n-1;
            while(j<k){
                int temp=nums[i]+nums[j]+nums[k];//Temparory sum for comaprison
                if(abs(temp-target) < abs(sum-target) ) sum=temp;//if we find batter or closer sum then we update the above sum value
                if(temp>target){
                    k--;                  // if value is greater than target one just come one point right to left
                } else if(temp<target){
                    j++;             //if value is lower than target just come one point left to right 
                    
                }else return target;// if value already found no need to go for other just return 
            }
            
        }
        return sum;
    }
};
